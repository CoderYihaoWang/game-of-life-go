{"version":3,"sources":["Game.ts","Board.tsx","Modal.tsx","App.tsx","index.tsx"],"names":["CellStatus","Player","isPlayer1","status","Player1","Player1Dying","isPlayer2","Player2","Player2Dying","nextStatus","player1Neighbors","player2Neighbors","neighbors","None","Player1Reviving","Player2Reviving","cellStatusOf","player","Game","options","_options","_board","_player","_move","_winner","_history","_undos","_hasUndoApplied","_tempR","_tempC","_tempPlayer","this","newBoard","cloneBoard","Map","set","undos","undefined","board","get","r","c","canPut","unput","cellStatus","isSeeding","compute","Object","create","put","moveNext","setWinner","push","canUndo","pop","top","hasPlayer1","hasPlayer2","i","size","j","Draw","next","isPlayer","count","cellAt","wrapAtBoundary","length","seedingRounds","Array","fill","clone","colorOf","showHints","shadowOf","Board","game","setGame","cellSize","hasGameEnded","winner","handleClick","commit","handleMouseOver","handleMouseOut","Box","map","row","sx","display","cell","width","paddingBottom","backgroundColor","borderRadius","boxShadow","color","onClick","onMouseOver","onMouseOut","Modal","isOpen","onClose","setOptions","useState","setSize","setSeedingRounds","setUndos","setWrapAtBoundary","setShowHints","Dialog","open","fullWidth","maxWidth","PaperProps","elevation","square","padding","Grid","container","spacing","item","xs","Typography","fontSize","textAlign","margin","Divider","Slider","value","onChange","e","min","max","marks","valueLabelDisplay","Tooltip","title","valueLabelFormat","x","FormControlLabel","checked","label","labelPlacement","control","Switch","Button","variant","style","App","isModalOpen","setIsModalOpen","isPlayingBack","setIsPlayingBack","useEffect","Container","paddingLeft","height","verticalAlign","paddingRight","move","disabled","undo","history","setTimeout","theme","createTheme","palette","player1","main","light","dark","player2","primary","info","typography","button","textTransform","components","MuiFormControlLabel","styleOverrides","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.aa62aa75.chunk.js","sourcesContent":["export type Options = {\r\n  size: number,\r\n  seedingRounds: number,\r\n  undos: number | undefined,\r\n  wrapAtBoundary: boolean,\r\n  showHints: boolean\r\n}\r\n\r\nexport enum CellStatus {\r\n  None,\r\n  Player1,\r\n  Player1Dying,\r\n  Player1Reviving,\r\n  Player2,\r\n  Player2Dying,\r\n  Player2Reviving\r\n}\r\n\r\nfunction isPlayer1(status: CellStatus): boolean {\r\n  return status === CellStatus.Player1\r\n    || status === CellStatus.Player1Dying;\r\n}\r\n\r\nfunction isPlayer2(status: CellStatus): boolean {\r\n  return status === CellStatus.Player2\r\n    || status === CellStatus.Player2Dying;\r\n}\r\n\r\nfunction nextStatus(status: CellStatus, player1Neighbors: number, player2Neighbors: number): CellStatus {\r\n  const neighbors = player1Neighbors + player2Neighbors;\r\n\r\n  if (isPlayer1(status)) {\r\n    if (neighbors < 2 || neighbors > 3) return CellStatus.Player1Dying;\r\n    return CellStatus.Player1;\r\n  }\r\n\r\n  if (isPlayer2(status)) {\r\n    if (neighbors < 2 || neighbors > 3) return CellStatus.Player2Dying;\r\n    return CellStatus.Player2;\r\n  }\r\n\r\n  if (neighbors !== 3) return CellStatus.None;\r\n\r\n  if (player1Neighbors > player2Neighbors)\r\n    return CellStatus.Player1Reviving;\r\n\r\n  return CellStatus.Player2Reviving;\r\n}\r\n\r\nfunction applyStatusChange(status: CellStatus): CellStatus {\r\n  if (status === CellStatus.Player1Dying\r\n    || status === CellStatus.Player2Dying)\r\n    return CellStatus.None;\r\n  if (status === CellStatus.Player1Reviving) return CellStatus.Player1;\r\n  if (status === CellStatus.Player2Reviving) return CellStatus.Player2;\r\n  return status;\r\n}\r\n\r\nexport enum Player {\r\n  None,\r\n  Player1,\r\n  Player2,\r\n  Draw\r\n}\r\n\r\nfunction playerOf(cellStatus: CellStatus): Player {\r\n  if (isPlayer1(cellStatus)) return Player.Player1;\r\n  if (isPlayer2(cellStatus)) return Player.Player2;\r\n  return Player.None;\r\n}\r\n\r\nfunction cellStatusOf(player: Player): CellStatus {\r\n  if (player === Player.Player1) return CellStatus.Player1;\r\n  if (player === Player.Player2) return CellStatus.Player2;\r\n  return CellStatus.None;\r\n}\r\n\r\nfunction opponentOf(player: Player): Player {\r\n  return player === Player.Player1 ? Player.Player2 : Player.Player1;\r\n}\r\n\r\nexport class Game {\r\n  private _options: Options;\r\n  private _board: CellStatus[][];\r\n  private _player: Player;\r\n  private _move: number;\r\n  private _winner: Player;\r\n  private _history: CellStatus[][][];\r\n  private _undos: Map<Player, number | undefined>;\r\n  private _hasUndoApplied: boolean;\r\n  private _tempR: number | undefined;\r\n  private _tempC: number | undefined;\r\n  private _tempPlayer: Player;\r\n\r\n  constructor(options: Options) {\r\n    this._options = options;\r\n    this._player = Player.Player1;\r\n    this._move = 1;\r\n    this._winner = Player.None;\r\n    this._board = this.newBoard();\r\n    this._history = [this.cloneBoard(this._board)];\r\n    this._undos = new Map<Player, number>();\r\n    this._undos.set(Player.Player1, options.undos);\r\n    this._undos.set(Player.Player2, options.undos);\r\n    this._hasUndoApplied = false;\r\n    [this._tempR, this._tempC, this._tempPlayer] = [undefined, undefined, Player.None];\r\n  }\r\n\r\n  set board(board: CellStatus[][]) {\r\n    this._board = board;\r\n  }\r\n\r\n  get board() {\r\n    return this._board;\r\n  }\r\n\r\n  get options() {\r\n    return { ...this._options };\r\n  }\r\n\r\n  get history() {\r\n    return [...this._history];\r\n  }\r\n\r\n  get move() {\r\n    return this._move;\r\n  }\r\n\r\n  get undos(): number {\r\n    return this._undos.get(this._player)!;\r\n  }\r\n\r\n  get player(): Player {\r\n    return this._player;\r\n  }\r\n\r\n  get winner(): Player {\r\n    return this._winner;\r\n  }\r\n\r\n  canPut(r: number, c: number): boolean {\r\n    return !isPlayer1(this._board[r][c]) && !isPlayer2(this._board[r][c]);\r\n  }\r\n\r\n  put(r: number, c: number, player: Player): Game {\r\n    if (!this.canPut(r, c)) {\r\n      return this;\r\n    }\r\n\r\n    if (this._tempR !== undefined) {\r\n      this.unput();\r\n    }\r\n\r\n    [this._tempR, this._tempC, this._tempPlayer] = [r, c, playerOf(this._board[r][c])];\r\n    this._board[r][c] = cellStatusOf(player);\r\n\r\n    if (!this.isSeeding()) {\r\n      this.compute();\r\n    }\r\n\r\n    return Object.create(this);\r\n  }\r\n\r\n  unput(): Game {\r\n    if (this._tempR === undefined || this._tempC === undefined) {\r\n      return this;\r\n    }\r\n\r\n    const [r, c, player] = [this._tempR, this._tempC, this._tempPlayer];\r\n    [this._tempR, this._tempC, this._tempPlayer] = [undefined, undefined, Player.None];\r\n    this._board[r][c] = cellStatusOf(player);\r\n\r\n    if (!this.isSeeding()) {\r\n      this.compute();\r\n    }\r\n\r\n    return Object.create(this);\r\n  }\r\n\r\n  commit(r: number, c: number): Game {\r\n    if (this.canPut(r, c)) {\r\n      this.put(r, c, this._player);\r\n    }\r\n\r\n    if (this._tempR !== r || this._tempC !== c) {\r\n      return this;\r\n    }\r\n\r\n    this._hasUndoApplied = false;\r\n    this._player = opponentOf(this._player);\r\n    [this._tempR, this._tempC, this._tempPlayer] = [undefined, undefined, Player.None];\r\n\r\n    if (!this.isSeeding()) {\r\n      this.moveNext();\r\n      this.compute();\r\n      this.setWinner();\r\n    }\r\n\r\n    this._move++;\r\n\r\n    this._history.push(this.cloneBoard(this._board));\r\n\r\n    return Object.create(this);\r\n  }\r\n\r\n  canUndo(): boolean {\r\n    return !this._hasUndoApplied\r\n      && this._winner === Player.None\r\n      && this._move >= 3\r\n      && (this.undos === undefined || this.undos > 0);\r\n  }\r\n\r\n  undo(): Game {\r\n    if (!this.canUndo()) {\r\n      return this;\r\n    }\r\n    if (this.undos !== undefined) {\r\n      this._undos.set(this._player, this.undos - 1);\r\n    }\r\n    this._hasUndoApplied = true;\r\n    this._move -= 2;\r\n    this._history.pop();\r\n    this._history.pop();\r\n    const top = this._history.pop()!;\r\n    this._board = this.cloneBoard(top);\r\n    this._history.push(top);\r\n\r\n    if (!this.isSeeding()) {\r\n      this.setWinner();\r\n    }\r\n\r\n    return Object.create(this);\r\n  }\r\n\r\n  private setWinner() {\r\n    let hasPlayer1 = false;\r\n    let hasPlayer2 = false;\r\n    for (let i = 0; i < this._options.size; i++) {\r\n      for (let j = 0; j < this._options.size; j++) {\r\n        if (isPlayer1(this._board[i][j])) {\r\n          hasPlayer1 = true;\r\n        } else if (isPlayer2(this._board[i][j])) {\r\n          hasPlayer2 = true;\r\n        }\r\n      }\r\n    }\r\n    switch (true) {\r\n      case !hasPlayer1 && !hasPlayer2:\r\n        this._winner = Player.Draw;\r\n        return;\r\n      case !hasPlayer2:\r\n        this._winner = Player.Player1;\r\n        return;\r\n      case !hasPlayer1:\r\n        this._winner = Player.Player2;\r\n        return;\r\n      default:\r\n        this._winner = Player.None;\r\n    }\r\n  }\r\n\r\n  private compute() {\r\n    const newBoard = this.newBoard();\r\n    for (let i = 0; i < this._options.size; i++) {\r\n      for (let j = 0; j < this._options.size; j++) {\r\n        const player1Neighbors = this.neighbors(i, j, isPlayer1);\r\n        const player2Neighbors = this.neighbors(i, j, isPlayer2);\r\n        newBoard[i][j] = nextStatus(this._board[i][j], player1Neighbors, player2Neighbors);\r\n      }\r\n    }\r\n    this._board = newBoard;\r\n  }\r\n\r\n  private moveNext() {\r\n    const newBoard = this.newBoard();\r\n    for (let i = 0; i < this._options.size; i++) {\r\n      for (let j = 0; j < this._options.size; j++) {\r\n        const player1Neighbors = this.neighbors(i, j, isPlayer1);\r\n        const player2Neighbors = this.neighbors(i, j, isPlayer2);\r\n        const next = nextStatus(this._board[i][j], player1Neighbors, player2Neighbors);\r\n        newBoard[i][j] = applyStatusChange(next);\r\n      }\r\n    }\r\n    this._board = newBoard;\r\n  }\r\n\r\n  private neighbors(r: number, c: number, isPlayer: (_: CellStatus) => boolean): number {\r\n    let count = 0;\r\n    if (isPlayer(this.cellAt(r - 1, c))) count++;\r\n    if (isPlayer(this.cellAt(r + 1, c))) count++;\r\n    if (isPlayer(this.cellAt(r - 1, c - 1))) count++;\r\n    if (isPlayer(this.cellAt(r + 1, c - 1))) count++;\r\n    if (isPlayer(this.cellAt(r, c - 1))) count++;\r\n    if (isPlayer(this.cellAt(r - 1, c + 1))) count++;\r\n    if (isPlayer(this.cellAt(r + 1, c + 1))) count++;\r\n    if (isPlayer(this.cellAt(r, c + 1))) count++;\r\n    return count;\r\n  }\r\n\r\n  private cellAt(r: number, c: number): CellStatus {\r\n    if (this._options.wrapAtBoundary) {\r\n      r = (r + this._board.length) % this._board.length;\r\n      c = (c + this._board[0].length) % this._board[0].length;\r\n    }\r\n    if (r < 0 || r >= this._board.length || c < 0 || c >= this._board.length) {\r\n      return CellStatus.None;\r\n    }\r\n    return this._board[r][c];\r\n  }\r\n\r\n  private isSeeding(): boolean {\r\n    return this._options.seedingRounds * 2 >= this._move;\r\n  }\r\n\r\n  private newBoard(): CellStatus[][] {\r\n    const board = new Array<CellStatus[]>(this._options.size);\r\n    for (let i = 0; i < this._options.size; i++) {\r\n      board[i] = new Array<CellStatus>(this._options.size).fill(CellStatus.None);\r\n    }\r\n    return board;\r\n  }\r\n\r\n  private cloneBoard(board: CellStatus[][]) {\r\n    const clone = new Array<CellStatus[]>(this._options.size);\r\n    for (let i = 0; i < this._options.size; i++) {\r\n      clone[i] = [...board[i]]\r\n    }\r\n    return clone;\r\n  }\r\n}","import { Box } from \"@mui/material\";\r\nimport { CellStatus, Game, Player } from \"./Game\";\r\n\r\nfunction colorOf(status: CellStatus, showHints: boolean): string {\r\n  if (showHints) {\r\n    switch (status) {\r\n      case CellStatus.Player1:\r\n        return \"player1.light\";\r\n      case CellStatus.Player1Dying:\r\n        return \"player1.dark\";\r\n      case CellStatus.Player2:\r\n        return \"player2.light\";\r\n      case CellStatus.Player2Dying:\r\n        return \"player2.dark\";\r\n    }\r\n    return \"white\";\r\n  }\r\n  switch (status) {\r\n    case CellStatus.Player1:\r\n    case CellStatus.Player1Dying:\r\n      return \"player1.light\";\r\n    case CellStatus.Player2:\r\n    case CellStatus.Player2Dying:\r\n      return \"player2.light\";\r\n  }\r\n  return \"white\";\r\n}\r\n\r\nfunction shadowOf(status: CellStatus, showHints: boolean): string {\r\n  if (showHints) {\r\n    switch (status) {\r\n      case CellStatus.Player1:\r\n      case CellStatus.Player1Reviving:\r\n        return \"player1.main\";\r\n      case CellStatus.Player2:\r\n      case CellStatus.Player2Reviving:\r\n        return \"player2.main\";\r\n    }\r\n    return \"primary.main\";\r\n  }\r\n  switch (status) {\r\n    case CellStatus.Player1:\r\n    case CellStatus.Player1Dying:\r\n      return \"player1.main\";\r\n    case CellStatus.Player2:\r\n    case CellStatus.Player2Dying:\r\n      return \"player2.main\";\r\n  }\r\n  return \"primary.main\";\r\n}\r\n\r\nexport default function Board({\r\n  game,\r\n  setGame,\r\n}: {\r\n  game: Game;\r\n  setGame: (_: Game) => void;\r\n}) {\r\n  const cellSize = `${100 / game.options.size}%`;\r\n\r\n  const hasGameEnded = () => game.winner !== Player.None;\r\n\r\n  const handleClick = (r: number, c: number) => () => {\r\n    if (!hasGameEnded()) {\r\n      setGame(game.commit(r, c));\r\n    }\r\n  };\r\n\r\n  const handleMouseOver = (r: number, c: number) => () => {\r\n    if (!hasGameEnded()) {\r\n      setGame(game.put(r, c, game.player));\r\n    }\r\n  };\r\n\r\n  const handleMouseOut = () => {\r\n    if (!hasGameEnded()) {\r\n      setGame(game.unput());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {game.board.map((row, r) => (\r\n        <Box sx={{ display: \"flex\" }}>\r\n          {row.map((cell, c) => (\r\n            <Box\r\n              sx={{\r\n                display: \"block\",\r\n                width: cellSize,\r\n                paddingBottom: cellSize,\r\n                backgroundColor: colorOf(cell, game.options.showHints),\r\n                borderRadius: \"50%\",\r\n                boxShadow: \"5px 5px\",\r\n                color: shadowOf(cell, game.options.showHints),\r\n              }}\r\n              onClick={handleClick(r, c)}\r\n              onMouseOver={handleMouseOver(r, c)}\r\n              onMouseOut={handleMouseOut}\r\n            />\r\n          ))}\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","import { Options } from \"./Game\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  Divider,\r\n  FormControlLabel,\r\n  Grid,\r\n  Slider,\r\n  Switch,\r\n  Tooltip,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\n\r\nexport default function Modal({\r\n  isOpen,\r\n  onClose,\r\n  options,\r\n  setOptions,\r\n}: {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  options: Options;\r\n  setOptions: (_: Options) => void;\r\n}) {\r\n  const [minSize, maxSize] = [3, 20];\r\n  const [minSeedingRounds, maxSeedingRounds] = [1, 4];\r\n  const [minUndos, maxUndos] = [0, 6];\r\n\r\n  const [size, setSize] = useState<number>(options.size);\r\n  const [seedingRounds, setSeedingRounds] = useState<number>(\r\n    options.seedingRounds\r\n  );\r\n  const [undos, setUndos] = useState<number | undefined>(options.undos);\r\n  const [wrapAtBoundary, setWrapAtBoundary] = useState<boolean>(\r\n    options.wrapAtBoundary\r\n  );\r\n  const [showHints, setShowHints] = useState<boolean>(options.showHints);\r\n\r\n  const handleSizeChange = (e: Event, value: number | number[]) =>\r\n    setSize(value as number);\r\n  const handleSeedingRoundsChange = (e: Event, value: number | number[]) =>\r\n    setSeedingRounds(value as number);\r\n  const handleUndosChange = (e: Event, value: number | number[]) =>\r\n    setUndos(value === maxUndos ? undefined : (value as number));\r\n  const handleWrapAtBoundaryChange = (\r\n    e: React.SyntheticEvent,\r\n    checked: boolean\r\n  ) => setWrapAtBoundary(checked);\r\n  const handleShowHintsChange = (e: React.SyntheticEvent, checked: boolean) =>\r\n    setShowHints(checked);\r\n\r\n  const handleStart = () => {\r\n    setOptions({\r\n      size,\r\n      seedingRounds,\r\n      undos: undos,\r\n      wrapAtBoundary: wrapAtBoundary,\r\n      showHints,\r\n    });\r\n    onClose();\r\n  };\r\n\r\n  const revertsLabelDisplay: (_: number) => number | string = (x) =>\r\n    x === maxUndos ? \"Unlimited\" : x;\r\n\r\n  return (\r\n    <Dialog\r\n      open={isOpen}\r\n      onClose={onClose}\r\n      fullWidth\r\n      maxWidth=\"xs\"\r\n      PaperProps={{ elevation: 12, square: true }}\r\n    >\r\n      <Box sx={{ padding: \"2em\" }}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Typography\r\n              fontSize=\"2em\"\r\n              textAlign=\"center\"\r\n              sx={{ color: \"primary.main\" }}\r\n            >\r\n              Set New Game\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} margin=\"1em 0\">\r\n            <Divider />\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            <Slider\r\n              value={size}\r\n              onChange={handleSizeChange}\r\n              min={minSize}\r\n              max={maxSize}\r\n              marks\r\n              valueLabelDisplay=\"on\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Tooltip title=\"Size of the game board\">\r\n              <Typography fontSize=\"0.8em\">Board Size</Typography>\r\n            </Tooltip>\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            <Slider\r\n              value={seedingRounds}\r\n              onChange={handleSeedingRoundsChange}\r\n              min={minSeedingRounds}\r\n              max={maxSeedingRounds}\r\n              marks\r\n              valueLabelDisplay=\"on\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Tooltip title=\"Number of seeding rounds. The Game of Life calculation rules apply only after the seeding rounds.\">\r\n              <Typography fontSize=\"0.8em\">Seeding Rounds</Typography>\r\n            </Tooltip>\r\n          </Grid>\r\n          <Grid item xs={9}>\r\n            <Slider\r\n              value={undos ?? maxUndos}\r\n              onChange={handleUndosChange}\r\n              min={minUndos}\r\n              max={maxUndos}\r\n              valueLabelFormat={revertsLabelDisplay}\r\n              marks\r\n              valueLabelDisplay=\"on\"\r\n              size=\"small\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Tooltip title=\"Number of undo chances for each player\">\r\n              <Typography fontSize=\"0.8em\">Undo Chances</Typography>\r\n            </Tooltip>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Tooltip title=\"When checked, the left boundary of the board is treated as being connected with the right boundary, same for the upper and lower boundaries\">\r\n              <FormControlLabel\r\n                checked={wrapAtBoundary}\r\n                label=\"Wrap at Boundary\"\r\n                labelPlacement=\"end\"\r\n                onChange={handleWrapAtBoundaryChange}\r\n                control={<Switch />}\r\n              />\r\n            </Tooltip>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Tooltip title=\"When checked, the players can see the status of cells in the next round before actually making the move\">\r\n              <FormControlLabel\r\n                checked={showHints}\r\n                label=\"Show Hints\"\r\n                labelPlacement=\"end\"\r\n                onChange={handleShowHintsChange}\r\n                control={<Switch />}\r\n              />\r\n            </Tooltip>\r\n          </Grid>\r\n          <Grid item xs={12} margin=\"1em 0\">\r\n            <Divider />\r\n          </Grid>\r\n          <Grid item padding=\"2em 0 0 0\" xs={12}>\r\n            <Button\r\n              onClick={handleStart}\r\n              variant=\"contained\"\r\n              style={{ borderRadius: 0, boxShadow: \"0 0\", color: \"white\" }}\r\n              size=\"large\"\r\n            >\r\n              Start\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Dialog>\r\n  );\r\n}\r\n","import { Box, Button, Container, Grid, Typography } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Board from \"./Board\";\nimport { Options, Game, Player } from \"./Game\";\nimport Modal from \"./Modal\";\n\nexport default function App() {\n  const [options, setOptions] = useState<Options>({\n    size: 9,\n    seedingRounds: 2,\n    undos: 3,\n    wrapAtBoundary: false,\n    showHints: false,\n  });\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [isPlayingBack, setIsPlayingBack] = useState<boolean>(false);\n  const [game, setGame] = useState<Game>(new Game(options));\n\n  useEffect(() => {\n    setGame(new Game(options));\n  }, [options]);\n\n  const playerColor = () =>\n    game.winner !== Player.None\n      ? game.winner === Player.Player1\n        ? \"player1.main\"\n        : game.winner === Player.Player2\n        ? \"player2.main\"\n        : \"primary.main\"\n      : game.player === Player.Player1\n      ? \"player1.main\"\n      : \"player2.main\";\n\n  const handleModalOpen = () => setIsModalOpen(true);\n  const handleModalClose = () => setIsModalOpen(false);\n\n  const handleUndo = () => setGame(game.undo());\n\n  const handlePlayback = () => {\n    setIsPlayingBack(true);\n\n    const history = game.history;\n    let i = 0;\n    for (; i < history.length; i++) {\n      setTimeout(\n        ((i: number) => () => {\n          game.board = history[i];\n          setGame(Object.create(game));\n        })(i),\n        500 * i\n      );\n    }\n\n    setTimeout(() => {\n      setIsPlayingBack(false);\n    }, 500 * i);\n  };\n\n  return (\n    <Container maxWidth=\"xs\">\n      <Grid container>\n        <Grid\n          container\n          item\n          xs={12}\n          sx={{ backgroundColor: \"primary.main\", margin: \"3em 0 2em 0\" }}\n        >\n          <Grid item xs={6}>\n            <Typography\n              textAlign=\"left\"\n              fontSize=\"3em\"\n              color=\"white\"\n              paddingLeft=\"1em\"\n            >\n              <Box\n                sx={{\n                  display: \"inline-block\",\n                  width: \"0.8em\",\n                  height: \"0.8em\",\n                  borderRadius: \"50%\",\n                  backgroundColor: \"white\",\n                  boxShadow: \"5px 5px\",\n                  color: playerColor(),\n                  verticalAlign: \"baseline\",\n                }}\n              ></Box>\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography\n              textAlign=\"right\"\n              fontSize=\"3em\"\n              color=\"white\"\n              paddingRight=\"1em\"\n            >\n              {game.winner === Player.Draw\n                ? \"Draw\"\n                : game.winner !== Player.None\n                ? \"Wins!\"\n                : `#${game.move}`}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Board game={game} setGame={setGame} />\n        </Grid>\n        <Grid item xs={4} textAlign=\"center\" padding=\"2em 0\">\n          <Button\n            disabled={!game.canUndo() || isPlayingBack}\n            onClick={handleUndo}\n            variant=\"contained\"\n            style={{ borderRadius: 0, boxShadow: \"0 0\", color: \"white\" }}\n            size=\"large\"\n          >\n            {`Undo${game.undos > 0 ? `(${game.undos})` : \"\"}`}\n          </Button>\n        </Grid>\n        <Grid item xs={4} textAlign=\"center\" padding=\"2em 0\">\n          <Button\n            disabled={isPlayingBack}\n            onClick={handleModalOpen}\n            variant=\"contained\"\n            style={{ borderRadius: 0, boxShadow: \"0 0\", color: \"white\" }}\n            size=\"large\"\n          >\n            New Game\n          </Button>\n        </Grid>\n        <Grid item xs={4} textAlign=\"center\" padding=\"2em 0\">\n          <Button\n            disabled={game.winner === Player.None || isPlayingBack}\n            onClick={handlePlayback}\n            variant=\"contained\"\n            style={{ borderRadius: 0, boxShadow: \"0 0\", color: \"white\" }}\n            size=\"large\"\n          >\n            Playback\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal\n        isOpen={isModalOpen}\n        onClose={handleModalClose}\n        options={options}\n        setOptions={setOptions}\n      />\n    </Container>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport CssBaseLine from \"@mui/material/CssBaseline\";\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\nimport { createTheme } from \"@mui/material/styles\";\nimport { ThemeProvider } from \"@mui/material\";\n\ndeclare module \"@mui/material/styles\" {\n  interface PaletteOptions {\n    player1?: PaletteOptions[\"primary\"];\n    player2?: PaletteOptions[\"primary\"];\n  }\n}\n\nconst theme = createTheme({\n  palette: {\n    player1: {\n      main: \"#ffbff9\",\n      light: \"#ffe0fc\",\n      dark: \"#f7edf6\",\n    },\n    player2: {\n      main: \"#a3ffd7\",\n      light: \"#d1ffeb\",\n      dark: \"#e4f5ed\",\n    },\n    primary: {\n      main: \"#8ff2ff\",\n      light: \"#bdf7ff\",\n      dark: \"#a1e4ed\",\n    },\n    info: {\n      main: \"#bdbdbd\",\n      light: \"#f7f7f7\",\n      dark: \"#cfcfcf\",\n    },\n  },\n  typography: {\n    button: {\n      textTransform: \"none\",\n    },\n  },\n  components: {\n    MuiFormControlLabel: {\n      styleOverrides: {\n        label: {\n          fontSize: \"0.8em\",\n        },\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseLine />\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}